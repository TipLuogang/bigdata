使用快捷键 command + Shift + G 快速激活“前往文件夹”功能，窗口打开后，输入“/”并回车即可。
数仓
复杂计算分层简单化
避免重复计算
隔离原始数据

数据集市
	从属：数据来源于数仓，建设复杂，需先有数仓
	独立：数据直接来源于业务系统，各业务系统逻辑不一，形成数据孤岛


关系建模
	Bill Inmon
	在数仓中显现弊端，主要应用于业务系统

纬度建模
	Ralph kimball
	数仓普遍建模方式

范式作用：降低数据冗余性（存储，单机存储，数据一致性），带来的问题：表结构复杂（分库分表），查询性能影响
第一范式、第二范式、第三范式
学号	姓名 系名	系主任	课名	分数
	函数依赖：
		完全函数依赖：x,y-->z,分数完全函数依赖于（学号，课程）
		部分函数依赖：x,y-->z; x,y,n-->z, z部分函数依赖于xyn， 姓名部分函数依赖于（学号，课程）
		传递函数依赖：x->y, y->z, 则x->z, z传递函数依赖于x，系主任传递函数依赖于学号
1nf：属性不可切割，违反：商品:5台电脑--》商品：电脑， 数量：5
2nf：不能存在非主键字段部分函数依赖于主键字段
	主键字段：学号，课名
	姓名，系名，系主任部分函数依赖
	拆分：
		表1：学号	课名	分数
		表2：学号	姓名 系名 系主任
3nf：不能存在非主键字段传递函数依赖与主键字段
	对于表2，学号--》系名，系名--》系主任，学号--》系主任
	拆分：
		表2-1：学号，姓名，系名
		表2-2：系名，系主任

关系建模：
	将复杂的数据抽象为：实体和关系，以范式表示出来，模型较为松散，零碎，物理表数量多
	数据冗余低，数据一致性容易满足
	查询复杂，在大数据场景查询效率低

纬度模型：
	以数据分析为出发点，数据存在冗余，模型清晰，简洁，表的数量少
	纬度模型面向业务，将业务用事实表和纬度表呈现出来，表结构简单，查询效率高
		事实表：具体的业务事实，订单、支付、退款的操作（包括：1.各种维度表外键， 2.数量，金额等度量值字段）
		维度表：业务事实的描述信息，何人何时何地等

维度表：一般是对事实的描述信息，每一张维度表对应现实世界中的一个对象或者概念
	比如：用户，商品，日期，地区
	特点：范围很宽，字段比较多
		行数相对较小，通常小与10w条
		内容相对固定：编码表

事实表：每行数据代表一个具体的业务事件（下单，支付，退款，评价等）
	特点：数据量比较多
		内容相对窄，字段比较少（主要是维度表外键和度量值）
		经发生变化，媒体那会新增很多

	1.事务型事实表：
		以每个事务或事件作为单位，作为事实表中的一行记录
		保留所有的操作事件，一旦写入不再变化，适用于不会发生变化的业务
		每日增量同步

	2.周期型快照事实表：
		不会保留所有数据（不会保留所有的业务操作），只保留固定时间间隔的数据
		不关心具体的明细操作，只关心最终的操作结果
		例如：加购物车操作，不关心加减，关注的是最终用户购物车里面的是什么商品，没必要保留加减购物车操作，只保留某个时刻购物车快照
		每日全量快照

	3.累积型快照事实表：
		通常用于跟踪业务事实的变化，适用于会发生周期性业务变化的业务（订单：下单-支付-发货-确认收货）
		使用时间字段跟踪变化：
			订单id	用户id	下单时间	打包时间	发货时间	签收时间	订单金额
		新增及变化同步

纬度模型分类：
	星型模型（数仓偏向，shuffle少）
		维度只有一层
		性能好

	雪花模型
		对维度表规范化，消除数据冗余
		灵活

	星座模型
		多个星型模型、雪花模型交织在一起，基于多个事实表

数仓建模
ods：保留原始数据不做任何处理
	用户日志：通过flume+kafka+flume采集到hdfs（压缩文件形式），所有类型的日志都混杂在同一个日志文件中
		只需创建一张日志表
		日志表结构：日志中每条数据对应一条日志
		日志表字段：一个string类型的字段
		分区规划：按天分区，存放当天采集的用户行为日志


	业务数据：sqoop从mysql同步到hdfs，
		每行数据代表mysql中的每行数据
		每个字段以特定的分隔符分割，结构化存储
		建哪些表：从mysql同步了哪些表，就在ods建哪些表
		表结构：与mysql对应表保持一致
		字段：与mysql对应表一致
		分区：按天分区，每天一个分区，每天的分区存储当天从rdbms同步过来的数据

		sqoop同步策略：
			每日全量同步：存储完整的数据，每日全量表，按天分区，每天的分区保存的就是从当天业务数据库同步过来的全量数据，
						适用于表数据量不大，每天有数据插入和旧数据修改的场景

			每日增量同步：存储新增的数据，每日增量表，按天分区，每天的分区保存的就是从当天业务系统同步过来的新增的那一部分数据，
						适用于表数据量大，每天只有数据插入的场景（退单表、订单状态表，支付流水表）

			每日新增及变化同步：存储新增加和变化的数据，每天同步新增和变化数据过来，需要与之前的数据做整合，后续介绍，
						适用于表数据量大，每天有新增和变化的场景（用户表，订单表，优惠券领用表）

			特殊情况：只存一份固定值，比如地区表，省份表，民族表

			拿到一张表后，先看数据量大不大，再看表的数据是否有新增、变化，再根据这些策略去分析















































